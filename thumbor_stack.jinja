
{% set NAME_FW_ALLOW_PROXY_AND_HEALTH_CHECK = env["deployment"] + "-allow-health-check-and-proxy" %}
{% set NAME_SERVICE_ACCOUNT = env["deployment"] + "-thumbor-server" %}
{% set NAME_STORAGE_BUCKET = env["deployment"] + "-assets" + "-" + env["project_number"] %}
{% set NAME_INSTANCE_TEMPLATE = env["deployment"] + "-thumbor-server-it" %}
{% set NAME_HEALTH_CHECK = env["deployment"] + "-thumbor-server-hc" %}
{% set NAME_INSTANCE_GROUP_MANAGER = env["deployment"] + "-thumbor-server-igm" %}
{% set NAME_AUTOSCALER = env["deployment"] + "-thumbor-server-as" %}
{% set NAME_LB_BACKEND_SERVICE = env["deployment"] + "-thumbor-server-lb-bes" %}
{% set NAME_LB_BACKEND = env["deployment"] + "-thumbor-server-lb-be" %}
{% set NAME_LB_URL_MAP = env["deployment"] + "-thumbor-server-lb-um" %}
{% set NAME_LB_FRONTEND_HTTP = env["deployment"] + "-thumbor-server-lb-fe-http" %}
{% set NAME_LB = env["deployment"] + "-thumbor-server-lb" %}

resources:
  - name: {{ NAME_FW_ALLOW_PROXY_AND_HEALTH_CHECK }} 
    type: compute.v1.firewall
    properties:
      sourceRanges:
        - 35.191.0.0/16
        - 130.211.0.0/22
      allowed:
        - IPProtocol: tcp
          ports:
            - 80

  - name: {{ NAME_SERVICE_ACCOUNT }}
    type: iam.v1.serviceAccount
    properties:
      accountId: {{ NAME_SERVICE_ACCOUNT }}
      displayName: {{ NAME_SERVICE_ACCOUNT }}
     
  - name: {{ NAME_STORAGE_BUCKET }}
    type: storage.v1.bucket
    properties:
      location: {{ properties['region'] }}
      locationType: region
      storageClass: REGIONAL
      kind: storage#bucket
      versioning:
        enabled: false
    accessControl:
      gcpIamPolicy:
        bindings:
        - role: roles/storage.admin
          members:
          - "serviceAccount:$(ref.{{ NAME_SERVICE_ACCOUNT }}.email)"
        - role: roles/storage.legacyBucketOwner
          members:
          - "projectEditor:{{ env["project"] }}"
          - "projectOwner:{{ env["project"] }}"
        - role: roles/storage.legacyBucketReader
          members:
          - "projectViewer:{{ env["project"] }}"
  
  - name: {{ NAME_INSTANCE_TEMPLATE }}
    type: container_instance_template.jinja
    properties:
      machineType: {{ properties['serverMachineType'] }}
      serviceAccountEmail: $(ref.{{ env["deployment"] + "-thumbor-server" }}.email)
      port: 80
      dockerEnv:
         DETECTORS: '[''''thumbor.detectors.face_detector'''',''''thumbor.detectors.feature_detector'''']'
         OPTIMIZERS: '[''''thumbor.optimizers.jpegtran'''']'
         LOADER: thumbor_cloud_storage.loaders.cloud_storage_loader
         CLOUD_STORAGE_BUCKET_ID: {{ NAME_STORAGE_BUCKET }}
         CLOUD_STORAGE_PROJECT_ID: {{  env["project"] }}
         STORAGE_EXPIRATION_SECONDS: 300
         UPLOAD_ENABLED: False
         RESULT_STORAGE_EXPIRATION_SECONDS: 300
         RESULT_STORAGE_STORES_UNSAFE: True
      dockerImage: minimalcompact/thumbor
      containerImage: family/cos-stable
      tags: ["{{ NAME_FW_ALLOW_PROXY_AND_HEALTH_CHECK }}"]
      scopes:
        - https://www.googleapis.com/auth/devstorage.read_only


  - name: {{ NAME_HEALTH_CHECK }}
    type: compute.v1.healthCheck
    properties:
      checkIntervalSec: 10
      timeoutSec: 5
      unhealthyThreshold: 3
      healthyThreshold: 2
      type: TCP
      tcpHealthCheck:
        port: 80

  - name: {{ NAME_INSTANCE_GROUP_MANAGER }}
    type: compute.v1.instanceGroupManager
    properties:
      zone: {{ properties["region"]  + '-a'}}
      targetSize: 1
      baseInstanceName: {{ NAME_INSTANCE_GROUP_MANAGER }}
      instanceTemplate: $(ref.{{ NAME_INSTANCE_TEMPLATE }}.selfLink)
      autoHealingPolicies:
      - initialDelaySec: 300
        healthCheck: $(ref.{{ NAME_HEALTH_CHECK }}.selfLink)

  - name: {{ NAME_AUTOSCALER }}
    type: compute.v1.autoscaler
    properties:
      zone: {{ properties["region"]  + '-a'}}
      target: $(ref.{{ NAME_INSTANCE_GROUP_MANAGER }}.selfLink)
      autoscalingPolicy:
        minNumReplicas: 1
        maxNumReplicas: {{ properties["maxServers"] }}
        coolDownPeriodSec: 300
        cpuUtilization:
          utilizationTarget: 0.6
      
  - name: {{ NAME_LB_BACKEND_SERVICE }}
    type: compute.v1.backendService
    properties:
      loadBalancingScheme: EXTERNAL
      enableCDN: true
      portName: http
      protocol: HTTP
      backends:
        - group: $(ref.{{ NAME_INSTANCE_GROUP_MANAGER }}.instanceGroup)
      healthChecks: [ $(ref.{{ NAME_HEALTH_CHECK }}.selfLink) ]

  - name: {{ NAME_LB_URL_MAP }}
    type: compute.v1.urlMap
    properties:
      defaultService: $(ref.{{ NAME_LB_BACKEND_SERVICE }}.selfLink)      

  - name: {{ NAME_LB_FRONTEND_HTTP }}
    type: compute.v1.targetHttpProxy
    properties:
      urlMap: $(ref.{{ NAME_LB_URL_MAP }}.selfLink)

  - name: {{ NAME_LB }}
    type: compute.v1.globalForwardingRule
    properties:
      IPProtocol: TCP
      portRange: 80
      target: $(ref.{{ NAME_LB_FRONTEND_HTTP }}.selfLink)    
        